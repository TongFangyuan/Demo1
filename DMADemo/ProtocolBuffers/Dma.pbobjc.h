// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dma.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DeviceConfiguration;
@class DeviceInformation;
@class Dialog;
@class EndPointSpeech;
@class ForwardATCommand;
@class GetDeviceConfiguration;
@class GetDeviceInformation;
@class GetState;
@class NotifyDeviceConfiguration;
@class NotifySpeechState;
@class PairInformation;
@class ProvideSpeech;
@class Response;
@class SetState;
@class SpeechInitiator;
@class SpeechInitiator_WakeWord;
@class SpeechProvider;
@class SpeechSettings;
@class StartSpeech;
@class State;
@class StopSpeech;
@class SynchronizeState;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Transport

/**
 * //////////////////////////////////////////////////////////////////////////////
 * 传输层类型。当前还不支持iAP。
 **/
typedef GPB_ENUM(Transport) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Transport_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Transport_BluetoothLowEnergy = 0,
  Transport_BluetoothRfcomm = 1,
  Transport_BluetoothIap = 2,
};

GPBEnumDescriptor *Transport_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Transport_IsValidValue(int32_t value);

#pragma mark - Enum ErrorCode

/** 错误代码类型。 */
typedef GPB_ENUM(ErrorCode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ErrorCode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ErrorCode_Success = 0,
  ErrorCode_Unknown = 1,
  ErrorCode_Internal = 2,
  ErrorCode_Unsupported = 3,
  ErrorCode_UserCancelled = 4,
  ErrorCode_NotFound = 5,
  ErrorCode_Invalid = 6,
  ErrorCode_Busy = 7,

  /** Pair的错误返回：已经被配对了 */
  ErrorCode_NotInPairMode = 8,

  /** 签名验证失败 */
  ErrorCode_SignVerifyFail = 9,
};

GPBEnumDescriptor *ErrorCode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ErrorCode_IsValidValue(int32_t value);

#pragma mark - Enum Command

/** 控制指令类型。 */
typedef GPB_ENUM(Command) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Command_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Speech Recognition */
  Command_ProvideSpeech = 0,
  Command_ProvideSpeechAck = 1,
  Command_StartSpeech = 2,
  Command_StartSpeechAck = 3,
  Command_StopSpeech = 4,
  Command_StopSpeechAck = 5,
  Command_EndPointSpeech = 6,
  Command_EndPointSpeechAck = 7,
  Command_NotifySpeechState = 8,
  Command_NotifySpeechStateAck = 9,

  /** Device */
  Command_GetDeviceInformation = 20,
  Command_GetDeviceInformationAck = 21,
  Command_GetDeviceConfiguration = 22,
  Command_GetDeviceConfigurationAck = 23,
  Command_NotifyDeviceConfiguration = 24,
  Command_NotifyDeviceConfigurationAck = 25,
  Command_Pair = 26,
  Command_PairAck = 27,

  /** State */
  Command_GetState = 30,
  Command_GetStateAck = 31,
  Command_SetState = 32,
  Command_SetStateAck = 33,
  Command_SynchronizeState = 34,
  Command_SynchronizeStateAck = 35,

  /** Cellular calling */
  Command_ForwardAtCommand = 40,
  Command_ForwardAtCommandAck = 41,
};

GPBEnumDescriptor *Command_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Command_IsValidValue(int32_t value);

#pragma mark - Enum AudioSource

typedef GPB_ENUM(AudioSource) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AudioSource_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  AudioSource_Stream = 0,
};

GPBEnumDescriptor *AudioSource_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AudioSource_IsValidValue(int32_t value);

#pragma mark - Enum AudioProfile

typedef GPB_ENUM(AudioProfile) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AudioProfile_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  AudioProfile_CloseTalk = 0,
  AudioProfile_NearField = 1,
  AudioProfile_FarField = 2,
};

GPBEnumDescriptor *AudioProfile_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AudioProfile_IsValidValue(int32_t value);

#pragma mark - Enum AudioFormat

typedef GPB_ENUM(AudioFormat) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AudioFormat_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  AudioFormat_PcmL1616KhzMono = 0,
  AudioFormat_Opus16Khz32KbpsCbr020Ms = 1,
  AudioFormat_Opus16Khz16KbpsCbr020Ms = 2,
  AudioFormat_Msbc = 3,
  AudioFormat_Speex16Khz16Kbps = 4,
  AudioFormat_Sbc16KhzMono16Kbps28Bitpool16Numblocks8SubbandsSnr = 5,
};

GPBEnumDescriptor *AudioFormat_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AudioFormat_IsValidValue(int32_t value);

#pragma mark - Enum SpeechState

typedef GPB_ENUM(SpeechState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SpeechState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SpeechState_Idle = 0,
  SpeechState_Listening = 1,
  SpeechState_Processing = 2,
  SpeechState_Speaking = 3,
};

GPBEnumDescriptor *SpeechState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SpeechState_IsValidValue(int32_t value);

#pragma mark - Enum InitiatorType

typedef GPB_ENUM(InitiatorType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  InitiatorType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 可选的值："PRESS_AND_HOLD", "TAP", "PHONE_WAKEUP" */
  InitiatorType_PressAndHold = 0,
  InitiatorType_Tap = 1,
  InitiatorType_PhoneWakeup = 2,
  InitiatorType_WaitFollowWakeup = 3,
};

GPBEnumDescriptor *InitiatorType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL InitiatorType_IsValidValue(int32_t value);

#pragma mark - Enum SignMethod

typedef GPB_ENUM(SignMethod) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SignMethod_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SignMethod_Sha256 = 0,
  SignMethod_Sha1 = 1,

  /** 不建议使用 */
  SignMethod_Md5Sum = 2,
};

GPBEnumDescriptor *SignMethod_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SignMethod_IsValidValue(int32_t value);

#pragma mark - Enum SpeechInitiator_Type

typedef GPB_ENUM(SpeechInitiator_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SpeechInitiator_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SpeechInitiator_Type_None = 0,
  SpeechInitiator_Type_PressAndHold = 1,
  SpeechInitiator_Type_Tap = 3,
  SpeechInitiator_Type_Wakeword = 4,
};

GPBEnumDescriptor *SpeechInitiator_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SpeechInitiator_Type_IsValidValue(int32_t value);

#pragma mark - DmaRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface DmaRoot : GPBRootObject
@end

#pragma mark - ControlEnvelope

typedef GPB_ENUM(ControlEnvelope_FieldNumber) {
  ControlEnvelope_FieldNumber_Command = 1,
  ControlEnvelope_FieldNumber_RequestId = 2,
  ControlEnvelope_FieldNumber_Sign2 = 3,
  ControlEnvelope_FieldNumber_Rand2 = 4,
  ControlEnvelope_FieldNumber_Response = 9,
  ControlEnvelope_FieldNumber_ProvideSpeech = 21,
  ControlEnvelope_FieldNumber_StartSpeech = 22,
  ControlEnvelope_FieldNumber_StopSpeech = 23,
  ControlEnvelope_FieldNumber_EndPointSpeech = 24,
  ControlEnvelope_FieldNumber_NotifySpeechState = 25,
  ControlEnvelope_FieldNumber_GetDeviceInformation = 26,
  ControlEnvelope_FieldNumber_GetDeviceConfiguration = 27,
  ControlEnvelope_FieldNumber_NotifyDeviceConfiguration = 28,
  ControlEnvelope_FieldNumber_GetState = 29,
  ControlEnvelope_FieldNumber_SetState = 30,
  ControlEnvelope_FieldNumber_SynchronizeState = 31,
  ControlEnvelope_FieldNumber_ForwardAtcommand = 32,
};

typedef GPB_ENUM(ControlEnvelope_Payload_OneOfCase) {
  ControlEnvelope_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  ControlEnvelope_Payload_OneOfCase_Response = 9,
  ControlEnvelope_Payload_OneOfCase_ProvideSpeech = 21,
  ControlEnvelope_Payload_OneOfCase_StartSpeech = 22,
  ControlEnvelope_Payload_OneOfCase_StopSpeech = 23,
  ControlEnvelope_Payload_OneOfCase_EndPointSpeech = 24,
  ControlEnvelope_Payload_OneOfCase_NotifySpeechState = 25,
  ControlEnvelope_Payload_OneOfCase_GetDeviceInformation = 26,
  ControlEnvelope_Payload_OneOfCase_GetDeviceConfiguration = 27,
  ControlEnvelope_Payload_OneOfCase_NotifyDeviceConfiguration = 28,
  ControlEnvelope_Payload_OneOfCase_GetState = 29,
  ControlEnvelope_Payload_OneOfCase_SetState = 30,
  ControlEnvelope_Payload_OneOfCase_SynchronizeState = 31,
  ControlEnvelope_Payload_OneOfCase_ForwardAtcommand = 32,
};

/**
 * //////////////////////////////////////////////////////////////////////////////
 * 控制指令封装
 * 每一个发送到控制流的信息都需要被包在ControlEnvelope里面。详细定义如下。
 **/
@interface ControlEnvelope : GPBMessage

@property(nonatomic, readwrite) Command command;

/** 主动发起的command，带上这个参数，Ack的command会照原样带回来，建议长度不超过6个字节 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;

@property(nonatomic, readonly) ControlEnvelope_Payload_OneOfCase payloadOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Response *response;

/** command messages */
@property(nonatomic, readwrite, strong, null_resettable) ProvideSpeech *provideSpeech;

@property(nonatomic, readwrite, strong, null_resettable) StartSpeech *startSpeech;

@property(nonatomic, readwrite, strong, null_resettable) StopSpeech *stopSpeech;

@property(nonatomic, readwrite, strong, null_resettable) EndPointSpeech *endPointSpeech;

@property(nonatomic, readwrite, strong, null_resettable) NotifySpeechState *notifySpeechState;

@property(nonatomic, readwrite, strong, null_resettable) GetDeviceInformation *getDeviceInformation;

@property(nonatomic, readwrite, strong, null_resettable) GetDeviceConfiguration *getDeviceConfiguration;

@property(nonatomic, readwrite, strong, null_resettable) NotifyDeviceConfiguration *notifyDeviceConfiguration;

@property(nonatomic, readwrite, strong, null_resettable) GetState *getState;

@property(nonatomic, readwrite, strong, null_resettable) SetState *setState;

@property(nonatomic, readwrite, strong, null_resettable) SynchronizeState *synchronizeState;

@property(nonatomic, readwrite, strong, null_resettable) ForwardATCommand *forwardAtcommand;

/**
 * sign2与rand2皆为可选字段，用于手机发起的指令的签名，在外设对此字段做相应的鉴权操作，具体清空README.md中关于鉴权的描述
 * 目前仅有PROVIDE_SPEECH和GET_STATE(ENTER_OTA_MODE)需要带sign2字段
 * sign2 = sha256(rand2 + rand + key + product\\_id + serial\\_number)
 * 签名算法需要使用PairInformation中的SignMethod
 * 起名sign2和rand2是为了区分PairInformation中的sign和rand
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign2;

/** 可选 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rand2;

@end

/**
 * Fetches the raw value of a @c ControlEnvelope's @c command property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ControlEnvelope_Command_RawValue(ControlEnvelope *message);
/**
 * Sets the raw value of an @c ControlEnvelope's @c command property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetControlEnvelope_Command_RawValue(ControlEnvelope *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void ControlEnvelope_ClearPayloadOneOfCase(ControlEnvelope *message);

#pragma mark - Response

typedef GPB_ENUM(Response_FieldNumber) {
  Response_FieldNumber_ErrorCode = 1,
  Response_FieldNumber_SpeechProvider = 11,
  Response_FieldNumber_DeviceInformation = 12,
  Response_FieldNumber_DeviceConfiguration = 13,
  Response_FieldNumber_State = 14,
  Response_FieldNumber_PairInformation = 15,
};

typedef GPB_ENUM(Response_Payload_OneOfCase) {
  Response_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  Response_Payload_OneOfCase_SpeechProvider = 11,
  Response_Payload_OneOfCase_DeviceInformation = 12,
  Response_Payload_OneOfCase_DeviceConfiguration = 13,
  Response_Payload_OneOfCase_State = 14,
  Response_Payload_OneOfCase_PairInformation = 15,
};

/**
 * 每一个发送到控制流的控制指令都需要有一个回复（ACK）。
 **/
@interface Response : GPBMessage

@property(nonatomic, readwrite) ErrorCode errorCode;

@property(nonatomic, readonly) Response_Payload_OneOfCase payloadOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) SpeechProvider *speechProvider;

@property(nonatomic, readwrite, strong, null_resettable) DeviceInformation *deviceInformation;

@property(nonatomic, readwrite, strong, null_resettable) DeviceConfiguration *deviceConfiguration;

@property(nonatomic, readwrite, strong, null_resettable) State *state;

@property(nonatomic, readwrite, strong, null_resettable) PairInformation *pairInformation;

@end

/**
 * Fetches the raw value of a @c Response's @c errorCode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Response_ErrorCode_RawValue(Response *message);
/**
 * Sets the raw value of an @c Response's @c errorCode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetResponse_ErrorCode_RawValue(Response *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void Response_ClearPayloadOneOfCase(Response *message);

#pragma mark - Dialog

typedef GPB_ENUM(Dialog_FieldNumber) {
  Dialog_FieldNumber_Id_p = 1,
};

/**
 * //////////////////////////////////////////////////////////////////////////////
 * 能力：语音识别
 **/
@interface Dialog : GPBMessage

@property(nonatomic, readwrite) uint32_t id_p;

@end

#pragma mark - SpeechInitiator

typedef GPB_ENUM(SpeechInitiator_FieldNumber) {
  SpeechInitiator_FieldNumber_Type = 1,
  SpeechInitiator_FieldNumber_WakeWord = 2,
};

@interface SpeechInitiator : GPBMessage

@property(nonatomic, readwrite) SpeechInitiator_Type type;

@property(nonatomic, readwrite, strong, null_resettable) SpeechInitiator_WakeWord *wakeWord;
/** Test to see if @c wakeWord has been set. */
@property(nonatomic, readwrite) BOOL hasWakeWord;

@end

/**
 * Fetches the raw value of a @c SpeechInitiator's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SpeechInitiator_Type_RawValue(SpeechInitiator *message);
/**
 * Sets the raw value of an @c SpeechInitiator's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSpeechInitiator_Type_RawValue(SpeechInitiator *message, int32_t value);

#pragma mark - SpeechInitiator_WakeWord

typedef GPB_ENUM(SpeechInitiator_WakeWord_FieldNumber) {
  SpeechInitiator_WakeWord_FieldNumber_StartIndexInSamples = 1,
  SpeechInitiator_WakeWord_FieldNumber_EndIndexInSamples = 2,
};

@interface SpeechInitiator_WakeWord : GPBMessage

@property(nonatomic, readwrite) uint32_t startIndexInSamples;

@property(nonatomic, readwrite) uint32_t endIndexInSamples;

@end

#pragma mark - SpeechSettings

typedef GPB_ENUM(SpeechSettings_FieldNumber) {
  SpeechSettings_FieldNumber_AudioProfile = 1,
  SpeechSettings_FieldNumber_AudioFormat = 2,
  SpeechSettings_FieldNumber_AudioSource = 3,
};

@interface SpeechSettings : GPBMessage

@property(nonatomic, readwrite) AudioProfile audioProfile;

@property(nonatomic, readwrite) AudioFormat audioFormat;

@property(nonatomic, readwrite) AudioSource audioSource;

@end

/**
 * Fetches the raw value of a @c SpeechSettings's @c audioProfile property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SpeechSettings_AudioProfile_RawValue(SpeechSettings *message);
/**
 * Sets the raw value of an @c SpeechSettings's @c audioProfile property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSpeechSettings_AudioProfile_RawValue(SpeechSettings *message, int32_t value);

/**
 * Fetches the raw value of a @c SpeechSettings's @c audioFormat property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SpeechSettings_AudioFormat_RawValue(SpeechSettings *message);
/**
 * Sets the raw value of an @c SpeechSettings's @c audioFormat property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSpeechSettings_AudioFormat_RawValue(SpeechSettings *message, int32_t value);

/**
 * Fetches the raw value of a @c SpeechSettings's @c audioSource property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SpeechSettings_AudioSource_RawValue(SpeechSettings *message);
/**
 * Sets the raw value of an @c SpeechSettings's @c audioSource property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSpeechSettings_AudioSource_RawValue(SpeechSettings *message, int32_t value);

#pragma mark - StartSpeech

typedef GPB_ENUM(StartSpeech_FieldNumber) {
  StartSpeech_FieldNumber_Settings = 1,
  StartSpeech_FieldNumber_Initiator = 2,
  StartSpeech_FieldNumber_Dialog = 3,
};

@interface StartSpeech : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SpeechSettings *settings;
/** Test to see if @c settings has been set. */
@property(nonatomic, readwrite) BOOL hasSettings;

@property(nonatomic, readwrite, strong, null_resettable) SpeechInitiator *initiator;
/** Test to see if @c initiator has been set. */
@property(nonatomic, readwrite) BOOL hasInitiator;

@property(nonatomic, readwrite, strong, null_resettable) Dialog *dialog;
/** Test to see if @c dialog has been set. */
@property(nonatomic, readwrite) BOOL hasDialog;

@end

#pragma mark - ProvideSpeech

typedef GPB_ENUM(ProvideSpeech_FieldNumber) {
  ProvideSpeech_FieldNumber_Dialog = 1,
};

@interface ProvideSpeech : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Dialog *dialog;
/** Test to see if @c dialog has been set. */
@property(nonatomic, readwrite) BOOL hasDialog;

@end

#pragma mark - SpeechProvider

typedef GPB_ENUM(SpeechProvider_FieldNumber) {
  SpeechProvider_FieldNumber_Settings = 1,
  SpeechProvider_FieldNumber_Dialog = 2,
};

/**
 * ProvideSpeech的返回值
 **/
@interface SpeechProvider : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SpeechSettings *settings;
/** Test to see if @c settings has been set. */
@property(nonatomic, readwrite) BOOL hasSettings;

@property(nonatomic, readwrite, strong, null_resettable) Dialog *dialog;
/** Test to see if @c dialog has been set. */
@property(nonatomic, readwrite) BOOL hasDialog;

@end

#pragma mark - StopSpeech

typedef GPB_ENUM(StopSpeech_FieldNumber) {
  StopSpeech_FieldNumber_ErrorCode = 1,
  StopSpeech_FieldNumber_Dialog = 2,
};

@interface StopSpeech : GPBMessage

@property(nonatomic, readwrite) ErrorCode errorCode;

@property(nonatomic, readwrite, strong, null_resettable) Dialog *dialog;
/** Test to see if @c dialog has been set. */
@property(nonatomic, readwrite) BOOL hasDialog;

@end

/**
 * Fetches the raw value of a @c StopSpeech's @c errorCode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t StopSpeech_ErrorCode_RawValue(StopSpeech *message);
/**
 * Sets the raw value of an @c StopSpeech's @c errorCode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetStopSpeech_ErrorCode_RawValue(StopSpeech *message, int32_t value);

#pragma mark - EndPointSpeech

typedef GPB_ENUM(EndPointSpeech_FieldNumber) {
  EndPointSpeech_FieldNumber_Dialog = 1,
};

@interface EndPointSpeech : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Dialog *dialog;
/** Test to see if @c dialog has been set. */
@property(nonatomic, readwrite) BOOL hasDialog;

@end

#pragma mark - NotifySpeechState

typedef GPB_ENUM(NotifySpeechState_FieldNumber) {
  NotifySpeechState_FieldNumber_State = 1,
};

@interface NotifySpeechState : GPBMessage

@property(nonatomic, readwrite) SpeechState state;

@end

/**
 * Fetches the raw value of a @c NotifySpeechState's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t NotifySpeechState_State_RawValue(NotifySpeechState *message);
/**
 * Sets the raw value of an @c NotifySpeechState's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetNotifySpeechState_State_RawValue(NotifySpeechState *message, int32_t value);

#pragma mark - DeviceInformation

typedef GPB_ENUM(DeviceInformation_FieldNumber) {
  DeviceInformation_FieldNumber_SerialNumber = 1,
  DeviceInformation_FieldNumber_Name = 2,
  DeviceInformation_FieldNumber_SupportedTransportsArray = 3,
  DeviceInformation_FieldNumber_DeviceType = 4,
  DeviceInformation_FieldNumber_SupportedAudioFormatsArray = 5,
  DeviceInformation_FieldNumber_Manufacturer = 6,
  DeviceInformation_FieldNumber_Model = 7,
  DeviceInformation_FieldNumber_FirmwareVersion = 8,
  DeviceInformation_FieldNumber_SoftwareVersion = 9,
  DeviceInformation_FieldNumber_InitiatorType = 10,
  DeviceInformation_FieldNumber_ProductId = 11,
  DeviceInformation_FieldNumber_ClassicBluetoothMac = 12,
  DeviceInformation_FieldNumber_DisableHeartBeat = 15,
};

/**
 * //////////////////////////////////////////////////////////////////////////////
 * 能力：设备信息
 **/
@interface DeviceInformation : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *serialNumber;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

// |supportedTransportsArray| contains |Transport|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *supportedTransportsArray;
/** The number of items in @c supportedTransportsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger supportedTransportsArray_Count;

/** default "3P" //HEADPHONE, SPEAKER, DOCK */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceType;

// |supportedAudioFormatsArray| contains |AudioFormat|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *supportedAudioFormatsArray;
/** The number of items in @c supportedAudioFormatsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger supportedAudioFormatsArray_Count;

/** 厂商 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *manufacturer;

/** 型号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

@property(nonatomic, readwrite, copy, null_resettable) NSString *firmwareVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *softwareVersion;

/** 设备支持的语音交互方式 */
@property(nonatomic, readwrite) InitiatorType initiatorType;

/** 产品id需要从度秘平台获得, 为空的时候，判定设备为UNKONWN或者OTHER。 长度不超过32字节 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *productId;

/** 类似06:36:3b:cd:c1:b0 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *classicBluetoothMac;

/**
 * 移动到了PairInformation，为了不引起兼容问题，以下13、14不要再使用了
 * string rand=13;//长度8位的随机字符串。注意：需要每次返回都不一样。具体逻辑请看README.md中的鉴权部分
 * string sign=14;//sign = sha256(rand + key + product_id + serial_number),  key需要从度秘平台获得。具体逻辑请看README.md中的鉴权部分
 **/
@property(nonatomic, readwrite) BOOL disableHeartBeat;

@end

/**
 * Fetches the raw value of a @c DeviceInformation's @c initiatorType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DeviceInformation_InitiatorType_RawValue(DeviceInformation *message);
/**
 * Sets the raw value of an @c DeviceInformation's @c initiatorType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDeviceInformation_InitiatorType_RawValue(DeviceInformation *message, int32_t value);

#pragma mark - PairInformation

typedef GPB_ENUM(PairInformation_FieldNumber) {
  PairInformation_FieldNumber_Rand = 1,
  PairInformation_FieldNumber_Sign = 2,
  PairInformation_FieldNumber_SignMethod = 3,
};

@interface PairInformation : GPBMessage

/** 长度8位的随机字符串。注意：需要每次返回都不一样，一旦返回后，需要把这个值保存下来，供ProvideSpeech的签名验证使用。具体逻辑请看README.md中的鉴权部分 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rand;

/** sign = sha256(rand + key + product_id + serial_number),  key需要从度秘平台获得。具体逻辑请看README.md中的鉴权部分 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign;

/** 签名算法 */
@property(nonatomic, readwrite) SignMethod signMethod;

@end

/**
 * Fetches the raw value of a @c PairInformation's @c signMethod property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PairInformation_SignMethod_RawValue(PairInformation *message);
/**
 * Sets the raw value of an @c PairInformation's @c signMethod property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPairInformation_SignMethod_RawValue(PairInformation *message, int32_t value);

#pragma mark - DeviceConfiguration

typedef GPB_ENUM(DeviceConfiguration_FieldNumber) {
  DeviceConfiguration_FieldNumber_NeedsAssistantOverride = 1,
  DeviceConfiguration_FieldNumber_NeedsSetup = 2,
};

@interface DeviceConfiguration : GPBMessage

/** 现在都是false，不需要 */
@property(nonatomic, readwrite) BOOL needsAssistantOverride;

@property(nonatomic, readwrite) BOOL needsSetup;

@end

#pragma mark - GetDeviceInformation

@interface GetDeviceInformation : GPBMessage

@end

#pragma mark - GetDeviceConfiguration

@interface GetDeviceConfiguration : GPBMessage

@end

#pragma mark - NotifyDeviceConfiguration

@interface NotifyDeviceConfiguration : GPBMessage

@end

#pragma mark - State

typedef GPB_ENUM(State_FieldNumber) {
  State_FieldNumber_Feature = 1,
  State_FieldNumber_Boolean = 2,
  State_FieldNumber_Integer = 3,
};

typedef GPB_ENUM(State_Value_OneOfCase) {
  State_Value_OneOfCase_GPBUnsetOneOfCase = 0,
  State_Value_OneOfCase_Boolean = 2,
  State_Value_OneOfCase_Integer = 3,
};

@interface State : GPBMessage

@property(nonatomic, readwrite) uint32_t feature;

@property(nonatomic, readonly) State_Value_OneOfCase valueOneOfCase;

@property(nonatomic, readwrite) BOOL boolean;

@property(nonatomic, readwrite) uint32_t integer;

@end

/**
 * Clears whatever value was set for the oneof 'value'.
 **/
void State_ClearValueOneOfCase(State *message);

#pragma mark - GetState

typedef GPB_ENUM(GetState_FieldNumber) {
  GetState_FieldNumber_Feature = 1,
};

@interface GetState : GPBMessage

@property(nonatomic, readwrite) uint32_t feature;

@end

#pragma mark - SetState

typedef GPB_ENUM(SetState_FieldNumber) {
  SetState_FieldNumber_State = 1,
};

@interface SetState : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) State *state;
/** Test to see if @c state has been set. */
@property(nonatomic, readwrite) BOOL hasState;

@end

#pragma mark - SynchronizeState

typedef GPB_ENUM(SynchronizeState_FieldNumber) {
  SynchronizeState_FieldNumber_State = 1,
};

@interface SynchronizeState : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) State *state;
/** Test to see if @c state has been set. */
@property(nonatomic, readwrite) BOOL hasState;

@end

#pragma mark - ForwardATCommand

typedef GPB_ENUM(ForwardATCommand_FieldNumber) {
  ForwardATCommand_FieldNumber_Command = 1,
};

@interface ForwardATCommand : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *command;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
